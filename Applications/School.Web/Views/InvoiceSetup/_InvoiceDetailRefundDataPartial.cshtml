@using System.Data;
@using School.Models.WebModels.InvoiceSetupModels
@model InvInvoiceSummaryRefundModel;
@{
	string formattedDate = Model.InvoiceDate.HasValue ? Model.InvoiceDate.Value.ToString("yyyy-MM-dd") : string.Empty;
	var isDisableField = Model.Status.ToLower() == "posted";
}

<div class="table-responsive table-card order-tabel" style="width:100%">
	<table class="table align-middle table-nowrap mb-0" id="tblDetailActivityData">
		<thead class="table-light text-muted">
			<tr>
				<th width="5%">S.No</th>
				<th>Invoice Type</th>
				<th>Academic Year</th>
				<th>Parent Id</th>
				<th>Parent Name</th>
				<th>Student Id</th>
				<th>Student Name</th>
				<th>Available Quantity</th>
				<th>Price</th>
				<th>Refundable Total</th>
				<th>Quantity</th>
				<th>Refund Amount</th>
			</tr>
		</thead>
		<tbody class="list form-check-all">
			@if (Model != null && Model.InvoiceDetailList.Count > 0)
			{
				int i = 0;
				foreach (var dr in Model.InvoiceDetailList)
				{
					string disabledQuantity = dr.InvoiceType.ToLower().Contains("uniform") ? "" : "disabled";
					string disabledAmount = dr.InvoiceType.ToLower().Contains("uniform") ? "disabled" : "";

					i++;
					<tr>
						<td>@i</td>
						<td>@dr.InvoiceType</td>
						<td>@dr.AcademicYear</td>
						<td>@dr.ParentId</td>
						<td>@dr.ParentName</td>
						<td>@dr.StudentId</td>
						<td>@dr.StudentName</td>
						<td>@dr.AvailableQuantity</td>
						<td>@dr.UnitPrice</td>
						<td>@dr.AvailableItemSubtotal</td>
						<td>
							@if (dr.InvoiceType.ToLower().Contains("uniform"))
							{
								string inputName = "Quantity_"+@dr.InvoiceNo+ "_" + @i;
								<input type="text" id="Quantity" name="@inputName" class="form-control numeric Quantity" data-SessionKey="@dr.SessionKey" data-InvoiceNo="@dr.InvoiceNo"
									   data-Index="@i" data-InvoiceSessionKey="@dr.InvoiceSessionKey" class="form-control numberOnly" placeholder="Quantity"
									   value="@dr.Quantity"
									   >
							}
							else
							{
								string inputName2 = "Quantity_" + @dr.InvoiceNo+ "_" + @i;
								<input type="text" id="Quantity" name="@inputName2" class="form-control numeric Quantity" data-SessionKey="@dr.SessionKey" data-InvoiceNo="@dr.InvoiceNo"
									   data-Index="@i" data-InvoiceSessionKey="@dr.InvoiceSessionKey" class="form-control numberOnly" placeholder="Quantity"
									   value="@dr.Quantity" disabled>
							}

						</td>
						<td>
							@if (dr.InvoiceType.ToLower().Contains("uniform"))
							{
								string inputName = "RefundAmount_" + @dr.InvoiceNo + "_" + @i;
								<input type="text" id="RefundAmount" name="@inputName" class="form-control numeric RefundAmount" placeholder="Refund Amount" 
									   data-Index="@i" data-SessionKey="@dr.SessionKey" data-InvoiceNo="@dr.InvoiceNo" data-InvoiceSessionKey="@dr.InvoiceSessionKey" value="@dr.ItemSubtotal" disabled>
							}
							else
							{
								string inputName2 = "RefundAmount_" + @dr.InvoiceNo + "_" + @i;
								<input type="text" id="RefundAmount" name="@inputName2" class="form-control numeric RefundAmount" placeholder="Refund Amount"
									   data-Index="@i" data-SessionKey="@dr.SessionKey" data-InvoiceNo="@dr.InvoiceNo" data-InvoiceSessionKey="@dr.InvoiceSessionKey" value="@dr.ItemSubtotal">
							}
						</td>
					</tr>
				}
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="11" style="text-align: right;"><strong>Total Refund Amount:</strong></td>
				<td> <strong id="totalRefundAmount"></strong> </td>
			</tr>
		</tfoot>
	</table>
</div>

<script>
	$(document).ready(function () {
		$("#tblDetailActivityData").DataTable({
			// language: {
			//     search: "<i class='ri-search-line search-icon'></i>",
			//     searchPlaceholder: "Search ..."
			// },
			bSort: false,
			searching: false,
			paging: false,
			drawCallback: function (settings) {
				var api = this.api();
				var info = api.page.info();

				api.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
					cell.innerHTML = i + 1;// cell.innerHTML = i + 1 + info.start;
				});
				calculateTotalRefundAmount();
			}
		});
		$('#tblDetailActivityData').DataTable().on('draw.dt', function () {
			var info = $('#tblDetailActivityData').DataTable().page.info();
			$('#tblDetailActivityData').DataTable().column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
				cell.innerHTML = i + 1;// cell.innerHTML = i + 1 + info.start;
			});
		});

		var initialQuantityValue = null;
		var initialRefundValue = null;

		$('#tblDetailActivityData').on('focus', '.Quantity', function () {
			initialQuantityValue = $(this).val(); // Store the initial value on focus
		});

		$('#tblDetailActivityData').on('keypress', '.Quantity', function (e) {
			if (e.which == 13 || e.which == 9) {
				if (initialQuantityValue !== $(this).val()) { // Check if the value has changed
					refundQuantity(this);
				}
				e.preventDefault();
				$(this).blur();
			}
		});

		$('#tblDetailActivityData').on('focusout', '.Quantity', function () {
			if (initialQuantityValue !== $(this).val()) { // Check if the value has changed
				refundQuantity(this);
			}
		});


		$('#tblDetailActivityData').on('focus', '.RefundAmount', function () {
			initialRefundValue = $(this).val(); // Store the initial value on focus
		});

		$('#tblDetailActivityData').on('focusout', '.RefundAmount', function () {
			if (initialRefundValue !== $(this).val()) { // Check if the value has changed
				refundAmount(this);
			}
		});
		$('#tblDetailActivityData').on('keypress', '.RefundAmount', function (e) {
			if (e.which == 13 || e.which == 9) {
				if (initialRefundValue !== $(this).val()) { // Check if the value has changed
					refundAmount(this);
				}
				e.preventDefault();
				$(this).blur();
			}
		});

		$('#tblDetailActivityData').on('input', '.RefundAmount', function () {
			calculateTotalRefundAmount();
		});

		$('.numeric').keyup(function () {
			this.value = this.value.replace(/[^0-9.]/g, '');
		});

		$('.numberOnly').keyup(function () {
			this.value = this.value.replace(/[^0-9]/g, '');
		});
	});

	function refundQuantity(element) {
		var value = $(element).val();
		console.log("Quantity Value:", value);
		var dataModel = {
			InvoiceSessionKey: element.attributes["data-invoicesessionkey"].value,
			SessionKey: element.attributes["data-sessionkey"].value,
			InvoiceNo: element.attributes["data-invoiceno"].value,
			Quantity: parseInt(element.value),
			DataIndex: element.attributes["data-Index"].value,
			//Amount:parseFloat(element.value)
		};
		var urlToCall = '@Url.Action("RefundQuantity", "InvoiceSetup")';
		$app.post(urlToCall, dataModel).then(function (response) {
			if (response.result == 0) {
				var controlName="RefundAmount_" + dataModel.InvoiceNo + "_" + dataModel.DataIndex;
				var control = $("[name='" + controlName + "']");
				if (control != undefined)
					control.val(response.recordData.itemSubtotal)

				$app.notify.success("Data has been saved!");

				calculateTotalRefundAmount();
			} else if (response.result == -2) {
				$(element).val(0);
				$app.notify.error("Quantity cannot refund more than available quantity!");
			}
			else {
				$(element).val(0);
				$app.notify.error("Error in saving!");
			}
		})
	}

	function refundAmount(element) {
		
		var value = $(element).val();
		console.log("Amount:", value);
		var dataModel = {
			InvoiceSessionKey: element.attributes["data-invoicesessionkey"].value,
			SessionKey: element.attributes["data-sessionkey"].value,
			InvoiceNo: element.attributes["data-invoiceno"].value,
			Amount: parseFloat(element.value),
			DataIndex: element.attributes["data-Index"].value,
		};
		var urlToCall = '@Url.Action("RefundAmount", "InvoiceSetup")';
		$app.post(urlToCall, dataModel).then(function (response) {
			if (response.result == 0) {
				
				$app.notify.success("Data has been saved!");
				calculateTotalRefundAmount();
			}
			else if (response.result == -2) {
				$(element).val(0);
				$app.notify.error("Amount cannot return greater than refundable amount!");
			}
			else {
				$(element).val(0);
				$app.notify.error("Error in saving!");
			}
		})
	}

	function calculateTotalRefundAmount() {
		var totalRefundAmount = 0;
		$('#tblDetailActivityData tbody tr').each(function () {
			var refundAmount = parseFloat($(this).find('#RefundAmount').val()) || 0;
			totalRefundAmount += refundAmount;
		});
		$('#totalRefundAmount').html(totalRefundAmount.toFixed(2));
	}

</script>