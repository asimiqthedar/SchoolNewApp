
@{
    ViewData["Title"] = "Parent Student Statement Report";
}

<div class="row">
	<div class="col-12">
		<div class="page-title-box d-sm-flex align-items-center justify-content-between">
			<div class="page-title d-flex align-items-center justify-content-between">
				<ol class="breadcrumb m-0">
					<li class="breadcrumb-item">Report</li>
					<li class="breadcrumb-item active">Parent Student Statement</li>
				</ol>
				<div>
					<button type="button" class="btn btn-secondary" onclick="ExportSummaryPdfStatement()">
						<i class="fa-solid fa-file-pdf"></i> Summary Pdf
					</button>
					<button type="button" class="btn btn-secondary" onclick="ExportPdfStatement()">
						<i class="fa-solid fa-file-pdf"></i> Detail Pdf
					</button>

					<button type="button" class="btn btn-secondary" onclick="ExportSummaryPdfStatementEnAr('en')">
						<i class="fa-solid fa-file-pdf"></i> English Statement
					</button>

					<button type="button" class="btn btn-secondary" onclick="ExportSummaryPdfStatementEnAr('ar')">
						<i class="fa-solid fa-file-pdf"></i> Arabic Statement
					</button>

					<button type="button" class="btn btn-secondary" onclick="ExportExcelStatement()">
						<i class="fa-solid fa-file-excel"></i> Export to Excel
					</button>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="card">
	<div class="card-body">
		<div class="row mb-3 align-items-center  label-row">
			<div class="col-md-12 mb-5">
				<div class="row">
					<div class="col-md-8 p-3">
						<div class="row">
							<div class="col-lg-6">
								<label for="filterParentId" class="form-label">Parent Id</label>
								<select id="filterParentId" class="form-select" aria-label="Parent Id"
										asp-items="@(new SelectList(ViewBag.ParentDropdown,"Value", "Text"))">
								</select>
							</div>
							<div class="col-lg-6">
								<label for="filterParentName" class="form-label">Parent Name</label>
								<input type="text" class="form-control" id="filterParentName" placeholder="Enter Parent Name" />
							</div>
							<div class="col-lg-6">
								<label for="filterFatherIqama" class="form-label">Father Iqama</label>
								<input type="text" class="form-control" id="filterFatherIqama" placeholder="Enter Father Iqama" />
							</div>
							<div class="col-lg-6">
								<label for="filterFatherMobile" class="form-label">Father Mobile</label>
								<input type="text" class="form-control" id="filterFatherMobile" placeholder="Enter Father Mobile" />
							</div>

						</div>
					</div>
					<div class="col-md-4 p-3">
						<div class="row">
							<div class="col-lg-6">
								<label for="filterAcademicYear" class="form-label">Academic Year</label>
								<select id="filterAcademicYear" class="form-select" aria-label="Academic Year"
										asp-items="@(new SelectList(ViewBag.AcademicYearDropDown,"Value", "Text"))">
								</select>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-12 btn-col">
				<div class="row">
					<div class="col-md-12">
						<div class="d-flex backlog-btn-row">
							<div class="backlog-filter-btn">
								<button type="button" class="btn btn-primary" onclick="loadParentStudentStatementReportByFilter();">
									Search
								</button>
							</div>
							<div class="backlog-filter-btn">
								<button type="button" class="btn btn-secondary" onclick="RefreshSearch();">
									Refresh
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="row g-3">
			<div class="col-lg-12 col-md-12">
				<div class="tab-content screen-list">
					<div class="tab-pane fade show active" id="parent-student-statement-report-load">
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
@section scripts {
	<script>
		$(function () {
			$("#filterAcademicYear").prop("selectedIndex", 1);
		});
		function RefreshSearch() {
			$("#filterParentId").val(0);
			$("#filterParentName").val();
			$("#filterFatherIqama").val();
			$("#filterFatherMobile").val();
			$("#filterAcademicYear").val(0);
			$("#filterAcademicYear").prop("selectedIndex", 1);
			loadParentStudentStatementReportByFilter();
		}

		function loadParentStudentStatementReportByFilter() {
			var filterDataObj = {
				ParentId: $("#filterParentId").val(),
				ParentName: $("#filterParentName").val(),
				FatherIqama: $("#filterFatherIqama").val(),
				FatherMobile: $("#filterFatherMobile").val(),
				AcademicYear: $("#filterAcademicYear").val()
			};
			 if (filterDataObj["ParentId"]==0 && filterDataObj["ParentName"]=="" 
			 && filterDataObj["FatherIqama"]=="" && filterDataObj["FatherMobile"]=="") {
                $app.notify.validateDD("filterParentId", "Select filter");
				return;
            }

			ParentStudentStatementReportLoad(filterDataObj);
		}

		function ParentStudentStatementReportLoad(filterDataObj) {
			$('#parent-student-statement-report-load').empty();
			$('#parent-student-statement-report-load').html('<div class="row"> <div class="col-xl-12"><div class="card order-card"><span class="text-center no-text" style="color:#212529;"><img src="@Url.Content("~/images/loding.gif")"  /></span></div></div></div>');
			var urlToCall = baseUrl + 'Report/ParentStudentStatementReportDataPartial';
			$app.post(urlToCall, filterDataObj).then(function (response) {
				$('#parent-student-statement-report-load').html(response);
			});
		}

		function ExportExcelStatement() {
				 var filterDataObj = {
				reportName: "Parent Statement",
				parentId: $("#filterParentId").val() || 0, // Default to 0 if empty
				parentName: $("#filterParentName").val() || "",
				fatherIqama: $("#filterFatherIqama").val() || "",
				fatherMobile: $("#filterFatherMobile").val() || "",
				academicYear: $("#filterAcademicYear").val() || 0 // Default to 0 if empty
			};

			// Validation
			if (!filterDataObj.parentId && !filterDataObj.parentName && 
				!filterDataObj.fatherIqama && !filterDataObj.fatherMobile) {
				alert("Please select at least one filter.");
				return;
			}

			var urlToCall = baseUrl + 'Report/ExportParentStudentStatemetToExcel';

				fetch(urlToCall, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(filterDataObj)
				})
				.then(response => {
					if (!response.ok) {
						return response.text().then(text => {
							throw new Error(text || 'Network error');
						});
					}
					return response.blob(); // Get the response as a Blob
				})
				.then(blob => {
					var link = document.createElement('a');
					link.href = window.URL.createObjectURL(blob);
					link.download = filterDataObj.reportName + ".xlsx";
					link.click();
					window.URL.revokeObjectURL(link.href);
				})
				.catch(error => {
					console.error("Error exporting report:", error);
					alert("An error occurred while exporting the report: " + error.message);
				});
		}

		function ExportPdfStatement() {
			debugger;
			var filterDataObj = {
				reportName: "Parent Statement",
				parentId: $("#filterParentId").val() || 0, // Default to 0 if empty
				parentName: $("#filterParentName").val() || "",
				fatherIqama: $("#filterFatherIqama").val() || "",
				fatherMobile: $("#filterFatherMobile").val() || "",
				academicYear: $("#filterAcademicYear").val() || 0 // Default to 0 if empty
			};

			// Validation
			if (!filterDataObj.parentId && !filterDataObj.parentName &&
				!filterDataObj.fatherIqama && !filterDataObj.fatherMobile) {
				alert("Please select at least one filter.");
				return;
			}

			var urlToCall = baseUrl + 'Report/ExportParentStudentStatemetToPdf';

			fetch(urlToCall, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(filterDataObj)
			})
				.then(response => {
					if (!response.ok) {
						return response.text().then(text => {
							throw new Error(text || 'Network error');
						});
					}
					return response.blob(); // Get the response as a Blob
				})
				.then(blob => {
					var link = document.createElement('a');
					link.href = window.URL.createObjectURL(blob);
					link.download = filterDataObj.reportName + ".pdf";
					link.click();
					window.URL.revokeObjectURL(link.href);
				})
				.catch(error => {
					console.error("Error exporting report:", error);
					alert("An error occurred while exporting the report: " + error.message);
				});
		}

		function ExportSummaryPdfStatement() {
			debugger;
			var filterDataObj = {
				reportName: "Parent Statement",
				parentId: $("#filterParentId").val() || 0, // Default to 0 if empty
				parentName: $("#filterParentName").val() || "",
				fatherIqama: $("#filterFatherIqama").val() || "",
				fatherMobile: $("#filterFatherMobile").val() || "",
				academicYear: $("#filterAcademicYear").val() || 0 // Default to 0 if empty
			};

			// Validation
			if (!filterDataObj.parentId && !filterDataObj.parentName &&
				!filterDataObj.fatherIqama && !filterDataObj.fatherMobile) {
				alert("Please select at least one filter.");
				return;
			}

			var urlToCall = baseUrl + 'Report/ExportParentStudentStatemetToSummaryPdf';

			fetch(urlToCall, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(filterDataObj)
			})
				.then(response => {
					if (!response.ok) {
						return response.text().then(text => {
							throw new Error(text || 'Network error');
						});
					}
					return response.blob(); // Get the response as a Blob
				})
				.then(blob => {
					var link = document.createElement('a');
					link.href = window.URL.createObjectURL(blob);
					link.download = filterDataObj.reportName + ".pdf";
					link.click();
					window.URL.revokeObjectURL(link.href);
				})
				.catch(error => {
					console.error("Error exporting report:", error);
					alert("An error occurred while exporting the report: " + error.message);
				});
		}

		function View(studentId) {
			debugger;
			var url = '@Url.Action("ViewStudent", "Student")';
			url = url + '?studentId=' + studentId;
			//window.location.href = url;
			window.open(url, "_blank");
		}



		function ExportSummaryPdfStatementEnAr(type) {
			var filterDataObj = {
				type: type,
				reportName: "Parent Statement",
				parentId: $("#filterParentId").val() || 0, // Default to 0 if empty
				parentName: $("#filterParentName").val() || "",
				fatherIqama: $("#filterFatherIqama").val() || "",
				fatherMobile: $("#filterFatherMobile").val() || "",
				academicYear: $("#filterAcademicYear").val() || 0 // Default to 0 if empty
			};

			// Validation
			if (!filterDataObj.parentId && !filterDataObj.parentName &&
				!filterDataObj.fatherIqama && !filterDataObj.fatherMobile) {
				alert("Please select at least one filter.");
				return;
			}

			var urlToCall = baseUrl + 'Report/ExportParentStudentStatemetToSummaryPdfEnAr';

			fetch(urlToCall, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(filterDataObj)
			})
				.then(response => {
					if (!response.ok) {
						return response.text().then(text => {
							throw new Error(text || 'Network error');
						});
					}
					return response.blob(); // Get the response as a Blob
				})
				.then(blob => {
					var link = document.createElement('a');
					link.href = window.URL.createObjectURL(blob);
					link.download = filterDataObj.reportName + ".pdf";
					link.click();
					window.URL.revokeObjectURL(link.href);
				})
				.catch(error => {
					console.error("Error exporting report:", error);
					alert("An error occurred while exporting the report: " + error.message);
				});
		}

		 
	</script>
}