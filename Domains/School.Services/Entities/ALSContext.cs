// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using School.Services.ZatcaEntities;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.ConstrainedExecution;
using System.Security.AccessControl;
using System.Security.Cryptography.X509Certificates;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;

namespace School.Services.Entities;

public partial class ALSContext : DbContext
{
    public ALSContext(DbContextOptions<ALSContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AdvancePayment> AdvancePayments { get; set; }

    public virtual DbSet<FeeTypeDetail> FeeTypeDetails { get; set; }

    public virtual DbSet<IntGlsourceTable> IntGlsourceTables { get; set; }

    public virtual DbSet<IntSalesDistributionSourceTable> IntSalesDistributionSourceTables { get; set; }

    public virtual DbSet<IntSalesInvoiceSourceTable> IntSalesInvoiceSourceTables { get; set; }

    public virtual DbSet<IntSalesPaymentSourceTable> IntSalesPaymentSourceTables { get; set; }

    public virtual DbSet<InvInvoiceDetail> InvInvoiceDetails { get; set; }

    public virtual DbSet<InvInvoicePayment> InvInvoicePayments { get; set; }

    public virtual DbSet<InvInvoiceSummary> InvInvoiceSummaries { get; set; }

    public virtual DbSet<OpenApplyParent> OpenApplyParents { get; set; }

    public virtual DbSet<OpenApplyStudent> OpenApplyStudents { get; set; }

    public virtual DbSet<OpenApplyStudentParentMap> OpenApplyStudentParentMaps { get; set; }

    public virtual DbSet<TblBranchMaster> TblBranchMasters { get; set; }

    public virtual DbSet<TblContactInformation> TblContactInformations { get; set; }

    public virtual DbSet<TblCostCenterMaster> TblCostCenterMasters { get; set; }

    public virtual DbSet<TblCountryMaster> TblCountryMasters { get; set; }

    public virtual DbSet<TblDiscountMaster> TblDiscountMasters { get; set; }

    public virtual DbSet<TblDiscountRule> TblDiscountRules { get; set; }

    public virtual DbSet<TblDiscountRuleMapping> TblDiscountRuleMappings { get; set; }

    public virtual DbSet<TblDocumentTypeMaster> TblDocumentTypeMasters { get; set; }

    public virtual DbSet<TblEmailConfig> TblEmailConfigs { get; set; }

    public virtual DbSet<TblFeeGenerate> TblFeeGenerates { get; set; }

    public virtual DbSet<TblFeeGenerateDetail> TblFeeGenerateDetails { get; set; }

    public virtual DbSet<TblFeeGradewise> TblFeeGradewises { get; set; }

    public virtual DbSet<TblFeePaymentPlan> TblFeePaymentPlans { get; set; }

    public virtual DbSet<TblFeeStatement> TblFeeStatements { get; set; }

    public virtual DbSet<TblFeeStructure> TblFeeStructures { get; set; }

    public virtual DbSet<TblFeeTypeDetail> TblFeeTypeDetails { get; set; }

    public virtual DbSet<TblFeeTypeMaster> TblFeeTypeMasters { get; set; }

    public virtual DbSet<TblGenderTypeMaster> TblGenderTypeMasters { get; set; }

    public virtual DbSet<TblGradeMaster> TblGradeMasters { get; set; }

    public virtual DbSet<TblInvoiceTypeMaster> TblInvoiceTypeMasters { get; set; }

    public virtual DbSet<TblMenu> TblMenus { get; set; }

    public virtual DbSet<TblNotification> TblNotifications { get; set; }

    public virtual DbSet<TblNotificationGroup> TblNotificationGroups { get; set; }

    public virtual DbSet<TblNotificationGroupDetail> TblNotificationGroupDetails { get; set; }

    public virtual DbSet<TblNotificationTypeMaster> TblNotificationTypeMasters { get; set; }

    public virtual DbSet<TblOpenApplyMaster> TblOpenApplyMasters { get; set; }

    public virtual DbSet<TblParent> TblParents { get; set; }

    public virtual DbSet<TblParentAccount> TblParentAccounts { get; set; }

    public virtual DbSet<TblParentOpenApplyProcessed> TblParentOpenApplyProcesseds { get; set; }

    public virtual DbSet<TblPaymentMethod> TblPaymentMethods { get; set; }

    public virtual DbSet<TblPaymentMethodCategory> TblPaymentMethodCategories { get; set; }

    public virtual DbSet<TblRole> TblRoles { get; set; }

    public virtual DbSet<TblRoleMenuMapping> TblRoleMenuMappings { get; set; }

    public virtual DbSet<TblSchoolAcademic> TblSchoolAcademics { get; set; }

    public virtual DbSet<TblSchoolAccountInfo> TblSchoolAccountInfos { get; set; }

    public virtual DbSet<TblSchoolLogo> TblSchoolLogos { get; set; }

    public virtual DbSet<TblSchoolMaster> TblSchoolMasters { get; set; }

    public virtual DbSet<TblSchoolTermAcademic> TblSchoolTermAcademics { get; set; }

    public virtual DbSet<TblSection> TblSections { get; set; }

    public virtual DbSet<TblSiblingDiscount> TblSiblingDiscounts { get; set; }

    public virtual DbSet<TblSiblingDiscountDetail> TblSiblingDiscountDetails { get; set; }

    public virtual DbSet<TblSiblingDiscountMaster> TblSiblingDiscountMasters { get; set; }

    public virtual DbSet<TblStudent> TblStudents { get; set; }

    public virtual DbSet<TblStudentFeeDetail> TblStudentFeeDetails { get; set; }

    public virtual DbSet<TblStudentOpenApplyProcessed> TblStudentOpenApplyProcesseds { get; set; }

    public virtual DbSet<TblStudentOtherDiscountDetail> TblStudentOtherDiscountDetails { get; set; }

    public virtual DbSet<TblStudentSiblingDiscountDetail> TblStudentSiblingDiscountDetails { get; set; }

    public virtual DbSet<TblStudentStatus> TblStudentStatuses { get; set; }

    public virtual DbSet<TblTermMaster> TblTermMasters { get; set; }

    public virtual DbSet<TblUploadDocument> TblUploadDocuments { get; set; }

    public virtual DbSet<TblUser> TblUsers { get; set; }

    public virtual DbSet<TblVatCountryExclusionMap> TblVatCountryExclusionMaps { get; set; }

    public virtual DbSet<TblVatMaster> TblVatMasters { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }
    public virtual DbSet<SellerDeviceConfiguration> SellerDeviceConfigurations { get; set; }
    public virtual DbSet<SellerMaster> SellerMasters { get; set; }
    public virtual DbSet<DeviceZatcaDetail> DeviceZatcaDetails { get; set; }
    public virtual DbSet<UniformDetail> UniformDetails { get; set; }
    public virtual DbSet<vw_Invoices> vw_Invoices { get; set; }
    
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1256_CI_AS");

        modelBuilder.Entity<AdvancePayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AdvancePayment");

            entity.Property(e => e.AccountDescription)
                .HasMaxLength(255)
                .HasColumnName("Account Description");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(255)
                .HasColumnName("Account Number");
            entity.Property(e => e.CreditAmount).HasColumnName("Credit Amount");
            entity.Property(e => e.DebitAmount).HasColumnName("Debit Amount");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.FatherIqama).HasColumnName("Father Iqama");
            entity.Property(e => e.Grade).HasMaxLength(255);
            entity.Property(e => e.InvoiceNo).HasColumnName("Invoice No");
            entity.Property(e => e.JournalEntry).HasColumnName("Journal Entry");
            entity.Property(e => e.ParentName)
                .HasMaxLength(255)
                .HasColumnName("Parent Name");
            entity.Property(e => e.Payment)
                .HasMaxLength(255)
                .HasColumnName("PAYMENT");
            entity.Property(e => e.Pid).HasColumnName("PID");
            entity.Property(e => e.ReciptNo).HasColumnName("Recipt No");
            entity.Property(e => e.Reference).HasMaxLength(255);
            entity.Property(e => e.Series).HasMaxLength(255);
            entity.Property(e => e.Sid).HasColumnName("SID");
            entity.Property(e => e.StudentFullName)
                .HasMaxLength(255)
                .HasColumnName("Student Full Name");
            entity.Property(e => e.StudentIqama).HasColumnName("Student Iqama");
            entity.Property(e => e.TrxDate)
                .HasColumnType("datetime")
                .HasColumnName("TRX Date");
            entity.Property(e => e.Year)
                .HasMaxLength(255)
                .HasColumnName("YEAR");
        });

        modelBuilder.Entity<FeeTypeDetail>(entity =>
        {
            entity.ToTable("FeeTypeDetail");

            entity.Property(e => e.AcademicYear)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.FeeAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<IntGlsourceTable>(entity =>
        {
            entity.HasKey(e => new { e.Reference, e.SeqNum }).HasName("PK_GLSourceTable");

            entity.ToTable("INT_GLSourceTable");

            entity.Property(e => e.Reference)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(75)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditAmount).HasColumnType("numeric(19, 5)");
            entity.Property(e => e.DebitAmount).HasColumnType("numeric(19, 5)");
            entity.Property(e => e.DistributionRef)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Error).IsUnicode(false);
            entity.Property(e => e.ReversingDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<IntSalesDistributionSourceTable>(entity =>
        {
            entity.HasKey(e => new { e.Sopnumber, e.Soptype, e.SeqNum });

            entity.ToTable("INT_SalesDistributionSourceTable");

            entity.Property(e => e.Sopnumber)
                .HasMaxLength(21)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOPNumber");
            entity.Property(e => e.Soptype).HasColumnName("SOPType");
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreditAmount).HasColumnType("numeric(19, 5)");
            entity.Property(e => e.DebitAmount).HasColumnType("numeric(19, 5)");
            entity.Property(e => e.DistributionRef)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Error).IsUnicode(false);
        });

        modelBuilder.Entity<IntSalesInvoiceSourceTable>(entity =>
        {
            entity.HasKey(e => new { e.Sopnumber, e.Soptype, e.SeqNum });

            entity.ToTable("INT_SalesInvoiceSourceTable");

            entity.Property(e => e.Sopnumber)
                .HasMaxLength(21)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOPNumber");
            entity.Property(e => e.Soptype).HasColumnName("SOPType");
            entity.Property(e => e.CustomerNumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DocID");
            entity.Property(e => e.Error).IsUnicode(false);
            entity.Property(e => e.ItemNumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Quantity).HasColumnType("numeric(19, 5)");
            entity.Property(e => e.UnitPrice).HasColumnType("numeric(19, 5)");
        });

        modelBuilder.Entity<IntSalesPaymentSourceTable>(entity =>
        {
            entity.HasKey(e => new { e.Sopnumber, e.Soptype, e.SeqNum });

            entity.ToTable("INT_SalesPaymentSourceTable");

            entity.Property(e => e.Sopnumber)
                .HasMaxLength(21)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SOPNumber");
            entity.Property(e => e.Soptype).HasColumnName("SOPType");
            entity.Property(e => e.AuthorizationCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CardName)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CheckNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CheckbookId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CheckbookID");
            entity.Property(e => e.CreditCardNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Error).IsUnicode(false);
            entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentAmount).HasColumnType("numeric(19, 5)");
        });

        modelBuilder.Entity<InvInvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.InvoiceDetailId).HasName("pk_INV_InvoiceDetail");

            entity.ToTable("INV_InvoiceDetail");

            entity.Property(e => e.AcademicYear)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FatherMobile).HasMaxLength(100);
            entity.Property(e => e.InvoiceType)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.IqamaNumber).HasMaxLength(200);
            entity.Property(e => e.ItemCode).HasMaxLength(200);
            entity.Property(e => e.ItemSubtotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.NationalityId).HasMaxLength(50);
            entity.Property(e => e.ParentCode).HasMaxLength(50);
            entity.Property(e => e.ParentId).HasMaxLength(200);
            entity.Property(e => e.ParentName).HasMaxLength(200);
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StudentCode).HasMaxLength(50);
            entity.Property(e => e.StudentId).HasMaxLength(200);
            entity.Property(e => e.StudentName).HasMaxLength(200);
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TaxableAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<InvInvoicePayment>(entity =>
        {
            entity.HasKey(e => e.InvoicePaymentId).HasName("pk_INV_InvoicePayment");

            entity.ToTable("INV_InvoicePayment");

            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.PaymentReferenceNumber)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<InvInvoiceSummary>(entity =>
        {
            entity.HasKey(e => e.InvoiceId).HasName("pk_INV_InvoiceSummary");

            entity.ToTable("INV_InvoiceSummary");

            entity.Property(e => e.CreditNo).HasMaxLength(50);
            entity.Property(e => e.CreditReason).HasMaxLength(500);
            entity.Property(e => e.CustomerName).HasMaxLength(50);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceType).HasMaxLength(50);
            entity.Property(e => e.IqamaNumber)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ItemSubtotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ParentId)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.PublishedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TaxableAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<OpenApplyParent>(entity =>
        {
            entity.HasKey(e => e.Newid);

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.AddressIi).HasColumnName("address_ii");
            entity.Property(e => e.ArabicTitle).HasColumnName("arabic_title");
            entity.Property(e => e.BirthDate).HasColumnName("birth_date");
            entity.Property(e => e.City).HasColumnName("city");
            entity.Property(e => e.Country).HasColumnName("country");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.Employer).HasColumnName("employer");
            entity.Property(e => e.FirstName).HasColumnName("first_name");
            entity.Property(e => e.Gender).HasColumnName("gender");
            entity.Property(e => e.HomeTelephone).HasColumnName("home_telephone");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LastName).HasColumnName("last_name");
            entity.Property(e => e.MobilePhone).HasColumnName("mobile_phone");
            entity.Property(e => e.Nationality).HasColumnName("nationality");
            entity.Property(e => e.OtherName).HasColumnName("other_name");
            entity.Property(e => e.PIdSchoolParentId).HasColumnName("p_id_school_parent_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PassportId).HasColumnName("Passport_id");
            entity.Property(e => e.Phone).HasColumnName("phone");
            entity.Property(e => e.PostalCode).HasColumnName("postal_code");
            entity.Property(e => e.PreferredName).HasColumnName("preferred_name");
            entity.Property(e => e.Prefix).HasColumnName("prefix");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.WorkPhone).HasColumnName("work_phone");
        });

        modelBuilder.Entity<OpenApplyStudent>(entity =>
        {
            entity.HasKey(e => e.Newid);

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.AddressIi).HasColumnName("address_ii");
            entity.Property(e => e.AdmittedDate).HasColumnName("admitted_date");
            entity.Property(e => e.AgentId).HasColumnName("agent_id");
            entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");
            entity.Property(e => e.AppliedAt).HasColumnName("applied_at");
            entity.Property(e => e.AppliedDate).HasColumnName("applied_date");
            entity.Property(e => e.BirthDate).HasColumnName("birth_date");
            entity.Property(e => e.Campus).HasColumnName("campus");
            entity.Property(e => e.CampusId).HasColumnName("campus_id");
            entity.Property(e => e.ChecklistState).HasColumnName("checklist_state");
            entity.Property(e => e.City).HasColumnName("city");
            entity.Property(e => e.ContactDate).HasColumnName("contact_date");
            entity.Property(e => e.Country).HasColumnName("country");
            entity.Property(e => e.CustomId).HasColumnName("custom_id");
            entity.Property(e => e.DeclinedDate).HasColumnName("declined_date");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.EnrolledAt).HasColumnName("enrolled_at");
            entity.Property(e => e.EnrolledDate).HasColumnName("enrolled_date");
            entity.Property(e => e.EnrollmentDate).HasColumnName("enrollment_date");
            entity.Property(e => e.EnrollmentYear).HasColumnName("enrollment_year");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasColumnName("first_name");
            entity.Property(e => e.FullAddress).HasColumnName("full_address");
            entity.Property(e => e.Gender).HasColumnName("gender");
            entity.Property(e => e.Grade).HasColumnName("grade");
            entity.Property(e => e.GraduatedDate).HasColumnName("graduated_date");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.InquiredAt).HasColumnName("inquired_at");
            entity.Property(e => e.InquiredDate).HasColumnName("inquired_date");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasColumnName("last_name");
            entity.Property(e => e.LatestActivityDate).HasColumnName("latest_activity_date");
            entity.Property(e => e.ManagebacStudentId).HasColumnName("managebac_student_id");
            entity.Property(e => e.MbId).HasColumnName("mb_id");
            entity.Property(e => e.MobilePhone).HasColumnName("mobile_phone");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnName("name");
            entity.Property(e => e.Nationality).HasColumnName("nationality");
            entity.Property(e => e.OtherName).HasColumnName("other_name");
            entity.Property(e => e.PIdSchoolParentId).HasColumnName("p_id_school_parent_id");
            entity.Property(e => e.PassportId).HasColumnName("passport_id");
            entity.Property(e => e.PostalCode).HasColumnName("postal_code");
            entity.Property(e => e.PreferredName).HasColumnName("preferred_name");
            entity.Property(e => e.ProfilePhoto).HasColumnName("profile_photo");
            entity.Property(e => e.ProfilePhotoUpdatedAt).HasColumnName("profile_photo_updated_at");
            entity.Property(e => e.Representative).HasColumnName("representative");
            entity.Property(e => e.SerialNumber).HasColumnName("serial_number");
            entity.Property(e => e.SourceCampaign).HasColumnName("source_campaign");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.StatusChangedAt).HasColumnName("status_changed_at");
            entity.Property(e => e.StatusLevel).HasColumnName("status_level");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WaitListedDate).HasColumnName("wait_listed_date");
            entity.Property(e => e.WithdrawnDate).HasColumnName("withdrawn_date");
        });

        modelBuilder.Entity<OpenApplyStudentParentMap>(entity =>
        {
            entity.HasKey(e => e.StudentParentMapid);

            entity.ToTable("OpenApplyStudentParentMap");

            entity.Property(e => e.PrincePrefix).HasMaxLength(50);
        });

        modelBuilder.Entity<TblBranchMaster>(entity =>
        {
            entity.HasKey(e => e.BranchId);

            entity.ToTable("tblBranchMaster");

            entity.Property(e => e.BranchName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblContactInformation>(entity =>
        {
            entity.HasKey(e => e.ContactId);

            entity.ToTable("tblContactInformation");

            entity.Property(e => e.ContactEmail)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ContactPerson)
                .IsRequired()
                .HasMaxLength(400);
            entity.Property(e => e.ContactPosition)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ContactTelephone)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.School).WithMany(p => p.TblContactInformations)
                .HasForeignKey(d => d.SchoolId)
                .HasConstraintName("FK_tblContactInformation_tblSchoolMaster");
        });

        modelBuilder.Entity<TblCostCenterMaster>(entity =>
        {
            entity.HasKey(e => e.CostCenterId);

            entity.ToTable("tblCostCenterMaster");

            entity.Property(e => e.CostCenterName).HasMaxLength(200);
            entity.Property(e => e.CreditAccount).HasMaxLength(200);
            entity.Property(e => e.DebitAccount).HasMaxLength(200);
            entity.Property(e => e.Remarks).HasMaxLength(400);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblCountryMaster>(entity =>
        {
            entity.HasKey(e => e.CountryId);

            entity.ToTable("tblCountryMaster");

            entity.Property(e => e.CountryCode).HasMaxLength(3);
            entity.Property(e => e.CountryName).HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblDiscountMaster>(entity =>
        {
            entity.HasKey(e => e.DiscountId);

            entity.ToTable("tblDiscountMaster");

            entity.Property(e => e.DiscountName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.DiscountPercent)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblDiscountRule>(entity =>
        {
            entity.HasKey(e => e.DiscountRuleId);

            entity.ToTable("tblDiscountRules");

            entity.Property(e => e.DiscountRuleDescription)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblDiscountRuleMapping>(entity =>
        {
            entity.HasKey(e => e.DiscountRuleMapId);

            entity.ToTable("tblDiscountRuleMapping");

            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblDocumentTypeMaster>(entity =>
        {
            entity.HasKey(e => e.DocumentTypeId);

            entity.ToTable("tblDocumentTypeMaster");

            entity.Property(e => e.DocumentTypeName).HasMaxLength(200);
            entity.Property(e => e.Remarks).HasMaxLength(400);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblEmailConfig>(entity =>
        {
            entity.HasKey(e => e.EmailConfigId);

            entity.ToTable("tblEmailConfig");

            entity.Property(e => e.EnableSsl).HasColumnName("EnableSSL");
            entity.Property(e => e.FromEmail)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Host)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<TblFeeGenerate>(entity =>
        {
            entity.HasKey(e => e.FeeGenerateId);

            entity.ToTable("tblFeeGenerate");

            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblFeeGenerateDetail>(entity =>
        {
            entity.HasKey(e => e.FeeGenerateDetailId);

            entity.ToTable("tblFeeGenerateDetail");

            entity.Property(e => e.FeeAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblFeeGradewise>(entity =>
        {
            entity.HasKey(e => e.FeeGradewiseId);

            entity.ToTable("tblFeeGradewise");

            entity.Property(e => e.FirstAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FirstDueDate).HasColumnType("datetime");
            entity.Property(e => e.SecondAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SecondDueDate).HasColumnType("datetime");
            entity.Property(e => e.ThirdAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ThirdDueDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblFeePaymentPlan>(entity =>
        {
            entity.HasKey(e => e.FeePaymentPlanId);

            entity.ToTable("tblFeePaymentPlan");

            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentPlanAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblFeeStatement>(entity =>
        {
            entity.HasKey(e => e.FeeStatementId);

            entity.ToTable("tblFeeStatement");

            entity.Property(e => e.FeeAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FeeStatementType)
                .IsRequired()
                .HasMaxLength(200)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FeeType)
                .HasMaxLength(200)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ParentName)
                .HasMaxLength(200)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(200)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StudentName)
                .HasMaxLength(200)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblFeeStructure>(entity =>
        {
            entity.HasKey(e => e.FeeStructureId);

            entity.ToTable("tblFeeStructure");

            entity.Property(e => e.AcademicYear)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.FeeAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblFeeTypeDetail>(entity =>
        {
            entity.HasKey(e => e.FeeTypeDetailId);

            entity.ToTable("tblFeeTypeDetail");

            entity.Property(e => e.StaffFeeAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TermFeeAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblFeeTypeMaster>(entity =>
        {
            entity.HasKey(e => e.FeeTypeId);

            entity.ToTable("tblFeeTypeMaster");

            entity.Property(e => e.CreditAccount).HasMaxLength(200);
            entity.Property(e => e.DebitAccount).HasMaxLength(200);
            entity.Property(e => e.FeeTypeName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblGenderTypeMaster>(entity =>
        {
            entity.HasKey(e => e.GenderTypeId);

            entity.ToTable("tblGenderTypeMaster");

            entity.Property(e => e.CreditAccount).HasMaxLength(200);
            entity.Property(e => e.DebitAccount).HasMaxLength(200);
            entity.Property(e => e.GenderTypeName).HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblGradeMaster>(entity =>
        {
            entity.HasKey(e => e.GradeId);

            entity.ToTable("tblGradeMaster");

            entity.Property(e => e.CreditAccount).HasMaxLength(200);
            entity.Property(e => e.DebitAccount).HasMaxLength(200);
            entity.Property(e => e.GradeName).HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.CostCenter).WithMany(p => p.TblGradeMasters)
                .HasForeignKey(d => d.CostCenterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblGradeMaster_tblCostCenterMaster");
        });

        modelBuilder.Entity<TblInvoiceTypeMaster>(entity =>
        {
            entity.HasKey(e => e.InvoiceTypeId);

            entity.ToTable("tblInvoiceTypeMaster");

            entity.Property(e => e.AdvanceAccount).HasMaxLength(200);
            entity.Property(e => e.AdvanceAccountRemarks).HasMaxLength(400);
            entity.Property(e => e.InvoiceTypeName).HasMaxLength(200);
            entity.Property(e => e.ReceivableAccount).HasMaxLength(200);
            entity.Property(e => e.ReceivableAccountRemarks).HasMaxLength(400);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblMenu>(entity =>
        {
            entity.HasKey(e => e.MenuId);

            entity.ToTable("tblMenu");

            entity.Property(e => e.FaIcon).HasMaxLength(50);
            entity.Property(e => e.Menu)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MenuAction)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.MenuCtrl)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblNotification>(entity =>
        {
            entity.HasKey(e => e.NotificationId);

            entity.ToTable("tblNotification");

            entity.Property(e => e.RecordId)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.RecordType)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.StudentId)
                .HasMaxLength(100)
                .HasColumnName("student_id");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblNotificationGroup>(entity =>
        {
            entity.HasKey(e => e.NotificationGroupId);

            entity.ToTable("tblNotificationGroup");

            entity.Property(e => e.NotificationAction)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<TblNotificationGroupDetail>(entity =>
        {
            entity.HasKey(e => e.NotificationGroupDetailId);

            entity.ToTable("tblNotificationGroupDetail");

            entity.Property(e => e.NewValueJson).IsRequired();
            entity.Property(e => e.NotificationAction)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OldValueJson).IsRequired();
            entity.Property(e => e.TableRecordColumnName).HasMaxLength(200);
            entity.Property(e => e.TableRecordId)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<TblNotificationTypeMaster>(entity =>
        {
            entity.HasKey(e => e.NotificationTypeId);

            entity.ToTable("tblNotificationTypeMaster");

            entity.Property(e => e.ActionTable)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.NotificationActionTable).HasMaxLength(500);
            entity.Property(e => e.NotificationMsg)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.NotificationType)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<TblOpenApplyMaster>(entity =>
        {
            entity.HasKey(e => e.OpenApplyId);

            entity.ToTable("tblOpenApplyMaster");

            entity.Property(e => e.Audience).HasMaxLength(200);
            entity.Property(e => e.ClientId).HasMaxLength(200);
            entity.Property(e => e.ClientSecret).HasMaxLength(400);
            entity.Property(e => e.GrantType).HasMaxLength(200);
            entity.Property(e => e.OpenApplyJobPath).HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblParent>(entity =>
        {
            entity.HasKey(e => e.ParentId);

            entity.ToTable("tblParent");

            entity.Property(e => e.FatherArabicName).HasMaxLength(200);
            entity.Property(e => e.FatherEmail)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.FatherIqamaNo).HasMaxLength(50);
            entity.Property(e => e.FatherMobile).HasMaxLength(50);
            entity.Property(e => e.FatherName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.MotherArabicName).HasMaxLength(200);
            entity.Property(e => e.MotherEmail).HasMaxLength(200);
            entity.Property(e => e.MotherIqamaNo).HasMaxLength(50);
            entity.Property(e => e.MotherMobile).HasMaxLength(50);
            entity.Property(e => e.MotherName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ParentCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ParentImage).HasMaxLength(500);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblParentAccount>(entity =>
        {
            entity.HasKey(e => e.ParentAccountId);

            entity.ToTable("tblParentAccount");

            entity.Property(e => e.AdvanceAccount).HasMaxLength(200);
            entity.Property(e => e.ReceivableAccount).HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblParentOpenApplyProcessed>(entity =>
        {
            entity.HasKey(e => e.ProcessId);

            entity.ToTable("tblParentOpenApplyProcessed");

            entity.Property(e => e.FatherArabicName).HasMaxLength(200);
            entity.Property(e => e.FatherEmail)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.FatherIqamaNo).HasMaxLength(50);
            entity.Property(e => e.FatherMobile).HasMaxLength(50);
            entity.Property(e => e.FatherName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.MotherArabicName).HasMaxLength(200);
            entity.Property(e => e.MotherEmail).HasMaxLength(200);
            entity.Property(e => e.MotherIqamaNo).HasMaxLength(50);
            entity.Property(e => e.MotherMobile).HasMaxLength(50);
            entity.Property(e => e.MotherName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ParentCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ParentImage).HasMaxLength(500);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblPaymentMethod>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId);

            entity.ToTable("tblPaymentMethod");

            entity.Property(e => e.CreditAccount).HasMaxLength(200);
            entity.Property(e => e.DebitAccount).HasMaxLength(200);
            entity.Property(e => e.PaymentMethodName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblPaymentMethodCategory>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodCategoryId);

            entity.ToTable("tblPaymentMethodCategory");

            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblRole>(entity =>
        {
            entity.HasKey(e => e.RoleId);

            entity.ToTable("tblRole");

            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblRoleMenuMapping>(entity =>
        {
            entity.HasKey(e => e.RoleMenuMappingId);

            entity.ToTable("tblRoleMenuMapping");

            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblSchoolAcademic>(entity =>
        {
            entity.HasKey(e => e.SchoolAcademicId);

            entity.ToTable("tblSchoolAcademic");

            entity.Property(e => e.AcademicYear)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CreditAccount).HasMaxLength(200);
            entity.Property(e => e.DebitAccount).HasMaxLength(200);
            entity.Property(e => e.PeriodFrom).HasColumnType("datetime");
            entity.Property(e => e.PeriodTo).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.School).WithMany(p => p.TblSchoolAcademics)
                .HasForeignKey(d => d.SchoolId)
                .HasConstraintName("FK_tblSchoolAcademic_tblSchoolMaster");
        });

        modelBuilder.Entity<TblSchoolAccountInfo>(entity =>
        {
            entity.HasKey(e => e.SchoolAccountIid);

            entity.ToTable("tblSchoolAccountInfo");

            entity.Property(e => e.SchoolAccountIid).HasColumnName("SchoolAccountIId");
            entity.Property(e => e.AdvanceAccount).HasMaxLength(400);
            entity.Property(e => e.CodeDescription)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ReceivableAccount).HasMaxLength(400);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.School).WithMany(p => p.TblSchoolAccountInfos)
                .HasForeignKey(d => d.SchoolId)
                .HasConstraintName("FK_tblSchoolAccountInfo_tblSchoolMaster");
        });

        modelBuilder.Entity<TblSchoolLogo>(entity =>
        {
            entity.HasKey(e => e.SchoolLogoId);

            entity.ToTable("tblSchoolLogo");

            entity.Property(e => e.LogoName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.LogoPath)
                .IsRequired()
                .HasMaxLength(800);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.School).WithMany(p => p.TblSchoolLogos)
                .HasForeignKey(d => d.SchoolId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblSchoolLogo_tblSchoolMaster");
        });

        modelBuilder.Entity<TblSchoolMaster>(entity =>
        {
            entity.HasKey(e => e.SchoolId);

            entity.ToTable("tblSchoolMaster");

            entity.Property(e => e.Address).HasMaxLength(400);
            entity.Property(e => e.City).HasMaxLength(200);
            entity.Property(e => e.Logo).HasMaxLength(400);
            entity.Property(e => e.SchoolEmail).HasMaxLength(200);
            entity.Property(e => e.SchoolNameArabic).HasMaxLength(400);
            entity.Property(e => e.SchoolNameEnglish).HasMaxLength(400);
            entity.Property(e => e.Telephone).HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.VatNo).HasMaxLength(200);
            entity.Property(e => e.WebsiteUrl).HasMaxLength(400);

            entity.HasOne(d => d.Branch).WithMany(p => p.TblSchoolMasters)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblSchoolMaster_tblBranchMaster");
        });

        modelBuilder.Entity<TblSchoolTermAcademic>(entity =>
        {
            entity.HasKey(e => e.SchoolTermAcademicId);

            entity.ToTable("tblSchoolTermAcademic");

            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.TermName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.SchoolAcademic).WithMany(p => p.TblSchoolTermAcademics)
                .HasForeignKey(d => d.SchoolAcademicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblSchoolTermAcademic_tblSchoolAcademic");
        });

        modelBuilder.Entity<TblSection>(entity =>
        {
            entity.HasKey(e => e.SectionId);

            entity.ToTable("tblSection");

            entity.Property(e => e.SectionName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblSiblingDiscount>(entity =>
        {
            entity.HasKey(e => e.SiblingDiscountId);

            entity.ToTable("tblSiblingDiscount");

            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblSiblingDiscountDetail>(entity =>
        {
            entity.HasKey(e => e.SiblingDiscountDetailId);

            entity.ToTable("tblSiblingDiscountDetail");

            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountPercent).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblSiblingDiscountMaster>(entity =>
        {
            entity.HasKey(e => e.DiscountId);

            entity.ToTable("tblSiblingDiscountMaster");

            entity.Property(e => e.DiscountPercent).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.StaffDiscountPercent).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblStudent>(entity =>
        {
            entity.HasKey(e => e.StudentId).HasName("pk_tblStudent");

            entity.ToTable("tblStudent");

            entity.Property(e => e.AdmissionDate).HasColumnType("datetime");
            entity.Property(e => e.AdmissionYear).HasMaxLength(20);
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");
            entity.Property(e => e.Fees).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.IqamaNo)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.IsGpintegration).HasColumnName("IsGPIntegration");
            entity.Property(e => e.Mobile).HasMaxLength(20);
            entity.Property(e => e.PIdSchoolParentId)
                .HasMaxLength(100)
                .HasColumnName("p_id_school_parent_id");
            entity.Property(e => e.PassportExpiry).HasColumnType("datetime");
            entity.Property(e => e.PassportNo).HasMaxLength(50);
            entity.Property(e => e.StudentAddress)
                .IsRequired()
                .HasMaxLength(400);
            entity.Property(e => e.StudentArabicName).HasMaxLength(200);
            entity.Property(e => e.StudentCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StudentEmail)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.StudentImage).HasMaxLength(500);
            entity.Property(e => e.StudentName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawYear).HasMaxLength(20);

            entity.HasOne(d => d.CostCenter).WithMany(p => p.TblStudents)
                .HasForeignKey(d => d.CostCenterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblStudent_tblCostCenterMaster");

            entity.HasOne(d => d.Grade).WithMany(p => p.TblStudents)
                .HasForeignKey(d => d.GradeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblStudent_tblGrade");

            entity.HasOne(d => d.Parent).WithMany(p => p.TblStudents)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_tblStudent_tblParent");

            entity.HasOne(d => d.Section).WithMany(p => p.TblStudents)
                .HasForeignKey(d => d.SectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblStudent_tblSection");

            entity.HasOne(d => d.Term).WithMany(p => p.TblStudents)
                .HasForeignKey(d => d.TermId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblStudent_tblTermMaster");
        });

        modelBuilder.Entity<TblStudentFeeDetail>(entity =>
        {
            entity.HasKey(e => e.StudentFeeDetailId);

            entity.ToTable("tblStudentFeeDetail");

            entity.Property(e => e.FeeAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblStudentOpenApplyProcessed>(entity =>
        {
            entity.HasKey(e => e.ProcessId);

            entity.ToTable("tblStudentOpenApplyProcessed");

            entity.Property(e => e.AdmissionDate).HasColumnType("datetime");
            entity.Property(e => e.AdmissionYear).HasMaxLength(20);
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");
            entity.Property(e => e.Fees).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.IqamaNo)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.IsGpintegration).HasColumnName("IsGPIntegration");
            entity.Property(e => e.Mobile).HasMaxLength(20);
            entity.Property(e => e.PIdSchoolParentId)
                .HasMaxLength(100)
                .HasColumnName("p_id_school_parent_id");
            entity.Property(e => e.PassportExpiry).HasColumnType("datetime");
            entity.Property(e => e.PassportNo).HasMaxLength(50);
            entity.Property(e => e.StudentAddress)
                .IsRequired()
                .HasMaxLength(400);
            entity.Property(e => e.StudentArabicName).HasMaxLength(200);
            entity.Property(e => e.StudentCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StudentEmail)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.StudentImage).HasMaxLength(500);
            entity.Property(e => e.StudentName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawYear).HasMaxLength(20);
        });

        modelBuilder.Entity<TblStudentOtherDiscountDetail>(entity =>
        {
            entity.HasKey(e => e.StudentOtherDiscountDetailId);

            entity.ToTable("tblStudentOtherDiscountDetail");

            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountName)
                .IsRequired()
                .HasMaxLength(250)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DiscountStatus).HasDefaultValueSql("((3))");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblStudentSiblingDiscountDetail>(entity =>
        {
            entity.HasKey(e => e.StudentSiblingDiscountDetailId);

            entity.ToTable("tblStudentSiblingDiscountDetail");

            entity.Property(e => e.DiscountPercent).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DiscountStatus).HasDefaultValueSql("((3))");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblStudentStatus>(entity =>
        {
            entity.HasKey(e => e.StudentStatusId);

            entity.ToTable("tblStudentStatus");

            entity.Property(e => e.StatusName).HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblTermMaster>(entity =>
        {
            entity.HasKey(e => e.TermId);

            entity.ToTable("tblTermMaster");

            entity.Property(e => e.TermName).HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblUploadDocument>(entity =>
        {
            entity.HasKey(e => e.UploadedDocId);

            entity.ToTable("tblUploadDocument");

            entity.Property(e => e.DocNo)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.DocPath).HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.DocTypeNavigation).WithMany(p => p.TblUploadDocuments)
                .HasForeignKey(d => d.DocType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tblUploadDocument_tblDocumentTypeMaster1");
        });

        modelBuilder.Entity<TblUser>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.ToTable("tblUser");

            entity.Property(e => e.Otp).HasMaxLength(6);
            entity.Property(e => e.OtpExpiration).HasColumnType("datetime");
            entity.Property(e => e.ProfileImg).HasMaxLength(500);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UserArabicName).HasMaxLength(500);
            entity.Property(e => e.UserEmail)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UserPass)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.UserPhone).HasMaxLength(20);
        });

        modelBuilder.Entity<TblVatCountryExclusionMap>(entity =>
        {
            entity.HasKey(e => e.VatCountryMapId);

            entity.ToTable("tblVatCountryExclusionMap");

            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblVatMaster>(entity =>
        {
            entity.HasKey(e => e.VatId);

            entity.ToTable("tblVatMaster");

            entity.Property(e => e.CreditAccount).HasMaxLength(200);
            entity.Property(e => e.DebitAccount).HasMaxLength(200);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.VatTaxPercent).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
            entity.Property(e => e.TransactionType).HasMaxLength(100);
        });

        modelBuilder.Entity<SellerMaster>(entity =>
        {

            entity.HasKey(e => e.SellerId);
            entity.Property(e => e.SellerId).HasColumnType("bigint"); 
            entity.ToTable("SellerMaster");

            entity.Property(e => e.CommonName).HasMaxLength(500);
            entity.Property(e => e.OrganizationName).HasMaxLength(500);
            entity.Property(e => e.OrganizationIdentifier).HasMaxLength(500);
            entity.Property(e => e.OrganizationUnitName).HasMaxLength(500);
            entity.Property(e => e.Location).HasMaxLength(500);
            entity.Property(e => e.Industry).HasMaxLength(500);
            entity.Property(e => e.SchemeType).HasMaxLength(500);
            entity.Property(e => e.SchemaNo).HasMaxLength(100);
            entity.Property(e => e.CountryName).HasMaxLength(500);
            entity.Property(e => e.CountyIdentificationCode).HasMaxLength(2);
            entity.Property(e => e.DocumentCurrencyCode).HasMaxLength(100);
            entity.Property(e => e.TaxCurrencyCode).HasMaxLength(100);
            entity.Property(e => e.CityName).HasMaxLength(100);
            entity.Property(e => e.StreetName).HasMaxLength(400);
            entity.Property(e => e.BuildingNumber).HasMaxLength(400);
            entity.Property(e => e.CitySubdivisionName).HasMaxLength(400);
            entity.Property(e => e.PostalZone).HasMaxLength(400);
            entity.Property(e => e.IsDeleted).HasColumnType("bit");
            entity.Property(e => e.UpdateOn).HasColumnType("datetime");
            entity.Property(e => e.UpdateBy).HasColumnType("bigint");
           
        });
        modelBuilder.Entity<SellerDeviceConfiguration>(entity =>
        {
       
            entity.HasKey(e => e.SellerDeviceConfigurationId);

            entity.ToTable("SellerDeviceConfigurations");

            entity.Property(e => e.SellerId).HasColumnType("bigint");
        entity.Property(e => e.UserName).HasMaxLength(500);
            entity.Property(e => e.DeviceManufacturer).HasMaxLength(500);
            entity.Property(e => e.DeviceName).HasMaxLength(500);
            entity.Property(e => e.DeviceId).HasMaxLength(500);
            entity.Property(e => e.SerialNumber).HasMaxLength(500);
        entity.Property(e => e.IsDeleted).HasColumnType("bit");
        entity.Property(e => e.UpdateOn).HasColumnType("datetime");
        entity.Property(e => e.UpdateBy).HasColumnType("bigint");
      
        });
        modelBuilder.Entity<DeviceZatcaDetail>(entity =>
        {

            entity.HasKey(e => e.DeviceZatcaDetailId);

            entity.ToTable("DeviceZatcaDetail");

            entity.Property(e => e.SellerDeviceConfigurationId).HasColumnType("bigint");
            entity.Property(e => e.Mode).HasMaxLength(100);
            entity.Property(e => e.CSR).HasColumnType("varchar(max)");
            entity.Property(e => e.PrivateKey).HasColumnType("varchar(max)");
            entity.Property(e => e.PubicKey).HasColumnType("varchar(max)");
            entity.Property(e => e.SecretKey).HasColumnType("varchar(max)");

            entity.Property(e => e.IsDeleted).HasColumnType("bit");
            entity.Property(e => e.UpdateOn).HasColumnType("datetime");
            entity.Property(e => e.UpdateBy).HasColumnType("bigint");

        });
        modelBuilder.Entity<UniformDetail>(entity =>
        {

            entity.HasKey(e => e.UniformDetailID);

            entity.ToTable("UniformDetails");

            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(150);
            entity.Property(e => e.Grade).HasMaxLength(50);
            entity.Property(e => e.Color).HasMaxLength(50);
            entity.Property(e => e.Size).HasMaxLength(50);
            entity.Property(e => e.Quantity).HasMaxLength(50);
            entity.Property(e => e.UnitPrice).HasMaxLength(50);
            entity.Property(e => e.TaxableAmount).HasMaxLength(50);
            entity.Property(e => e.Discount).HasMaxLength(50);
            entity.Property(e => e.TaxRate).HasMaxLength(50);
            entity.Property(e => e.TaxAmount).HasMaxLength(50);
            entity.Property(e => e.ItemSubtotal).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy).HasMaxLength(50);
            

        });
        modelBuilder.Entity<vw_Invoices>(entity =>
        {
            entity.HasNoKey();
            // Optionally map to a specific database view or table
            entity.ToView("vw_Invoices"); // or .ToTable("vw_Invoices") if it's a table
        });
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}